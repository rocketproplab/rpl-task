{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>Hello! Welcome to the documentation site for RPL-TASK. The purpose of this project to allow for ease of generation of code files involving tasks and the creation of the tasks themselves.</p>"},{"location":"#setup","title":"Setup","text":"<p>Setup is done in a couple of parts. </p> <ol> <li>Set up CMake<ul> <li>The first thing that one needs to do is install CMake which can be done from the Cmake site. You need to be able to use the <code>cmake</code> command in order to make the tests as well as build the code.</li> </ul> </li> <li>Set up Make<ul> <li>Make is a tool to make shortcuts for terminal commands. If you have Windows you will need to find way to run Makefiles. Most other operating systems should be fine.</li> </ul> </li> <li>Clone the repository<ul> <li>Go to the repository to clone the RPL-Task repository.</li> </ul> </li> <li>Test that it works<ul> <li>run <code>make test</code> in the home directory of the clone repository and if all the tests pass success you're done.</li> <li>If not try and see what the issue is and fix it</li> </ul> </li> <li>Learn some GoogleTest<ul> <li>This is mainly going to be if you are writing tests, but go to the GoogleTest Primer to learn about it</li> </ul> </li> </ol>"},{"location":"#preliminaries","title":"Preliminaries","text":""},{"location":"#what-is-a-task","title":"What is a Task?","text":"<p>A task is what we have defined to be a small simple unit of work. Some quick examples of tasks are:</p> <ul> <li>Reading data from a magnetic encoder</li> <li>Turning a servo motor</li> <li>Accuating a solenoid</li> <li>Reading data from a serial port</li> </ul> <p>These task are used to build more complex routines. Some examples of tasks could be:</p> <ul> <li>GpsTask</li> <li>ServoValueTask</li> <li>AltimeterTask</li> <li>IgnitionTask</li> <li>Radio Task</li> </ul>"},{"location":"#why-do-we-need-tasks","title":"Why do we need Tasks?","text":"<p>Complex codebases are hard to work on. Even if we split the code into multiple files it would still be hard to work on and hard for people to learn. </p> <p>A better idea is to split the program into small self contained units of logic that are easy to understand and work with. These small units are the tasks.</p>"},{"location":"#project-layout","title":"Project Layout","text":"<p>This project is broken into three main parts:</p> <ol> <li>Task Library<ul> <li>The Task Library serves to allow for the easy creation of tasks through the use of interfaces.</li> <li>A benefit is that Tasks are forced to be able to work with other componenets by the interfaces.</li> </ul> </li> <li>Organization of Tasks<ul> <li>The organization of tasks prevents human error in creating strange dependecies (more on this later).</li> </ul> </li> <li>Code Generation<ul> <li>Quickly generates code that is easy to understand and human error free</li> </ul> </li> </ol>"},{"location":"first-task/","title":"Making Your First Task","text":"<p>Of course it would be useless to have a task library if you couldn't make your own task. This is a quick start up tutorial on how you can write you first one!</p>"},{"location":"first-task/#how-to-make-an-rpl-task","title":"How to make an RPL Task?","text":"<p>To make your first RPL Task just include the RPL Task class as an interface! Here is an example below:</p> <pre><code>    class ExampleTask : public RplTask{\n}\n</code></pre> <p>It's really that simple! You've made your first RPL Task. However, this task doesn't have much functionality, so let us now add some.</p>"},{"location":"first-task/#key-features-of-an-rpl-task","title":"Key features of an RPL Task","text":""},{"location":"first-task/#task-functions","title":"Task Functions","text":"<p>Every RPL task has a couple of key functions that you need to implement. These are:</p> <pre><code>    virtual void onStart() {};\nvirtual void onResume() {};\nvirtual void onPause() {};\nvirtual void onLoop() {};\nvirtual void init(RplTask** tasks, int taskCount) {};\n</code></pre> <p>These functions are what define what the Task should do whenever it is running as well as what it should do when it gets paused, resumed, and started. the <code>init</code> function is a set up function when the task is originally created.</p>"},{"location":"first-task/#header-comments","title":"Header Comments","text":"<p>One really important part of RPL Tasks are the Header Comments. These comments allow for the sorting and organization of tasks which is needed for the code generation. These header comments have the following format:</p> <pre><code>/*\nRPL-TASK-HEADER\nCLASS: Task3\nSTART-ON-BOOT: TRUE/FALSE\nTASK-DEPENDENCIES\nTask1\nTask2\nEND-TASK-DEPENDENCIES\nEND-RPL-TASK-HEADER\n*/\n</code></pre> <p>These comments tell the code important information for code generation such as: what Tasks does this Task depend on, what is this Task's name, and should this Task be on at start up of the rocket.</p>"},{"location":"output-strat/","title":"Creating An Output Strategy","text":""},{"location":"Full%20Documentation/arduino/","title":"ArduinoOutputStrategy.h","text":""},{"location":"Full%20Documentation/ioutput/","title":"iOutputStrategy.h","text":""},{"location":"Full%20Documentation/precomp/","title":"PrecompTopSort.cpp","text":""}]}